<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Free online notepad - Easy to use, no installation required. Save, edit and share your notes online.">
    <title>Online Notepad - Free and Responsive Web Notepad</title>
    <style>
        /* Basic Reset and Body Styling */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }

        body {
            /* Changed background gradient to light red and light pink */
            background: linear-gradient(135deg, #f08080 0%, #ffb6c1 100%); /* Light Coral to Light Pink */
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            padding: 20px;
            overflow-y: auto; /* Allow body scroll if content overflows */
        }

        /* Notepad Container */
        .notepad-container {
            width: 100%;
            max-width: 1000px; /* Max width for larger screens */
            background-color: #f4f4f4;
            border-radius: 8px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            overflow: hidden;
            display: flex;
            flex-direction: column;
            min-height: 80vh; /* Ensure a minimum height */
        }

        /* Header */
        .notepad-header {
            background-color: #e6e6e6;
            padding: 10px 15px;
            border-bottom: 1px solid #ccc;
            text-align: center;
        }

        .notepad-header h1 {
            font-size: 1.8rem; /* Responsive font size */
        }

        /* Menu Bar */
        .menu-bar {
            display: flex;
            background-color: #f9f9f9;
            border-bottom: 1px solid #ddd;
            padding: 5px 10px;
            flex-wrap: wrap; /* Allow wrapping on smaller screens */
        }

        .menu-item {
            position: relative;
            margin-right: 10px;
            cursor: pointer;
            padding: 5px 10px;
            user-select: none; /* Prevent text selection */
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
        }

        .menu-item:hover {
            background-color: #e0e0e0;
            border-radius: 4px;
        }

        /* Toolbar */
        .toolbar {
            display: flex;
            background-color: #f4f4f4;
            border-bottom: 1px solid #ddd;
            padding: 8px;
            flex-wrap: wrap; /* Allow wrapping on smaller screens */
            align-items: center;
            gap: 5px; /* Spacing between items */
        }

        .toolbar-item {
            width: 30px; /* Slightly larger touch target */
            height: 30px; /* Slightly larger touch target */
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            border-radius: 4px;
            padding: 3px;
            flex-shrink: 0; /* Prevent shrinking */
        }

        .toolbar-item:hover {
            background-color: #e0e0e0;
        }

        .toolbar-item svg {
            width: 18px; /* Slightly larger icons */
            height: 18px; /* Slightly larger icons */
        }


        .toolbar-separator {
            width: 1px;
            height: 24px;
            background-color: #ddd;
            margin: 0 5px;
            flex-shrink: 0; /* Prevent shrinking */
        }

        .dropdown {
            display: flex;
            align-items: center;
            margin-left: 5px;
            margin-right: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
            padding: 3px 8px;
            cursor: pointer;
            background-color: white;
            flex-grow: 1; /* Allow dropdowns to grow */
            min-width: 120px; /* Minimum width for dropdowns */
        }

        .dropdown select {
            border: none;
            background: transparent;
            outline: none;
            cursor: pointer;
            font-size: 14px;
            width: 100%; /* Make select fill the dropdown container */
        }

        /* Content Area (Text Editor) */
        .content-area {
            flex-grow: 1; /* Allow content area to take available space */
            padding: 10px;
            background-color: white;
            overflow: auto; /* Enable scrolling if content overflows */
            display: flex; /* Use flex to make textarea fill the area */
            min-height: 200px; /* Ensure minimum height for editor */
        }

        #editor {
            width: 100%; /* Fill the content area */
            height: 100%; /* Fill the content area */
            border: none;
            outline: none;
            resize: none; /* Prevent manual resizing by user */
            font-size: 16px;
            line-height: 1.5;
            padding: 0; /* Remove default padding */
        }

        /* Status Bar */
        .status-bar {
            padding: 5px 10px;
            background-color: #f4f4f4;
            border-top: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            font-size: 12px;
            color: #666;
            flex-shrink: 0; /* Prevent shrinking */
        }

        /* Fullscreen Toggle (Optional, if not in toolbar) */
        /* .fullscreen-toggle {
            position: absolute;
            right: 20px;
            top: 20px;
            cursor: pointer;
            background-color: rgba(255, 255, 255, 0.7);
            border-radius: 4px;
            padding: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 10;
        } */

        /* Dropdown Menus */
        .dropdown-menu {
            display: none;
            position: absolute;
            background-color: #fff;
            border: 1px solid #ddd;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            z-index: 100;
            border-radius: 4px;
            top: 100%; /* Position below the menu item */
            left: 0;
            min-width: 180px;
            max-width: 80vw; /* Max width relative to viewport */
            overflow-y: auto; /* Allow scrolling for long menus */
            max-height: calc(100vh - 100px); /* Max height relative to viewport height */
            box-sizing: border-box; /* Include padding and border in element's total width and height */
        }

        .dropdown-item {
            padding: 8px 15px;
            cursor: pointer;
            white-space: nowrap; /* Prevent wrapping */
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #f5f5f5;
        }

        .dropdown-item:last-child {
            border-bottom: none;
        }

        .dropdown-item:hover {
            background-color: #f0f0f0;
        }

        /* Notification Styles */
        .notification {
            position: fixed;
            bottom: 20px;
            right: 20px;
            padding: 12px 20px;
            border-radius: 4px;
            color: white;
            max-width: 80%;
            z-index: 1000;
            box-shadow: 0 3px 10px rgba(0, 0, 0, 0.2);
            transition: all 0.3s ease-in-out;
            opacity: 0;
            pointer-events: none; /* Allow clicks to pass through when hidden */
        }

        .notification.show {
            opacity: 1;
            pointer-events: auto; /* Enable clicks when shown */
        }

        .notification.success { background-color: #4CAF50; }
        .notification.error { background-color: #F4436A; } /* Changed from F4436 to F4436A for opacity */
        .notification.warning { background-color: #FF9800; }
        .notification.info { background-color: #2196F3; }


        /* Fullscreen Mode */
        .fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw;
            height: 100vh;
            z-index: 999; /* Above other content */
            background-color: #f4f4f4; /* Match notepad background */
            padding: 0; /* Remove padding in fullscreen */
            border-radius: 0; /* Remove border radius */
            box-shadow: none; /* Remove shadow */
        }

        .fullscreen .content-area {
             /* Recalculate height based on known element heights */
             /* Approximate heights: header ~40px, menu ~30px, toolbar ~40px, status ~20px. */
             /* Use CSS variables for better maintainability if needed */
             height: calc(100vh - 40px - 30px - 40px - 20px);
             display: flex; /* Ensure flex layout for textarea */
             flex-direction: column;
             padding: 10px; /* Add back content padding */
        }

         .fullscreen #editor {
             width: 100%;
             height: 100%; /* Fill the content area in fullscreen */
         }

        /* Responsive Adjustments */
        @media (max-width: 768px) {
            body {
                padding: 10px; /* Reduce padding on smaller screens */
            }

            .notepad-container {
                min-height: 95vh; /* Make notepad take more height on smaller screens */
            }

            .notepad-header h1 {
                font-size: 1.3rem; /* Smaller header font */
            }

            .menu-bar {
                overflow-x: auto; /* Enable horizontal scrolling for menu items */
                white-space: nowrap; /* Prevent wrapping */
                padding: 5px;
                -webkit-overflow-scrolling: touch; /* Smooth scrolling on iOS */
                justify-content: flex-start; /* Align items to the start */
            }

            .menu-item {
                 padding: 5px 8px;
                 margin-right: 5px; /* Adjust spacing */
                 flex-shrink: 0; /* Prevent shrinking */
            }

            .toolbar {
                flex-wrap: wrap; /* Allow wrapping */
                justify-content: center; /* Center items when wrapped */
                gap: 8px; /* Increase gap */
                padding: 8px 5px; /* Adjust padding */
            }

            .toolbar-item {
                 width: 35px; /* Larger touch target */
                 height: 35px; /* Larger touch target */
                 padding: 5px;
            }

            .toolbar-item svg {
                width: 20px; /* Larger icons */
                height: 20px; /* Larger icons */
            }

            .toolbar-separator {
                height: 30px; /* Adjust height */
                margin: 0 3px; /* Adjust margin */
            }

            .dropdown {
                margin: 5px 3px;
                flex-grow: 1; /* Allow growth */
                max-width: 48%; /* Max width for dropdowns when wrapped */
                min-width: 100px; /* Minimum width */
            }

             .dropdown select {
                font-size: 13px; /* Smaller font size */
             }

            .status-bar {
                font-size: 11px; /* Smaller status bar font */
                 padding: 5px 8px;
            }

            .dropdown-menu {
                position: fixed; /* Fixed position for mobile */
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                width: 90%; /* Wider menu */
                max-width: 350px; /* Max width */
                max-height: 70vh; /* Max height */
                box-shadow: 0 5px 20px rgba(0,0,0,0.3);
                border-radius: 8px;
                box-sizing: border-box;
            }

            /* Add a backdrop for fixed dropdown */
            .dropdown-menu::before {
                content: '';
                position: fixed;
                top: 0;
                left: 0;
                right: 0;
                bottom: 0;
                background: rgba(0,0,0,0.5); /* Darker backdrop */
                z-index: -1; /* Behind the menu */
            }

            .notification {
                bottom: 10px;
                right: 10px;
                max-width: 90%; /* Wider notification */
                padding: 10px 15px;
                font-size: 14px;
            }
        }

        @media (max-width: 480px) {
            .notepad-header h1 {
                font-size: 1.1rem;
            }

            .toolbar {
                gap: 5px; /* Smaller gap */
            }

            .toolbar-item {
                width: 30px;
                height: 30px;
                padding: 3px;
            }

             .toolbar-item svg {
                width: 16px;
                height: 16px;
            }

            .dropdown {
                 max-width: 100%; /* Allow dropdowns to take full width when wrapped */
                 margin: 3px 0;
            }

            .status-bar {
                flex-direction: column; /* Stack counts vertically */
                align-items: center;
                gap: 3px;
            }

            .dropdown-menu {
                 width: 95%; /* Even wider menu */
                 max-width: none; /* No max width */
            }
        }

        /* Print Styles */
        @media print {
            body, .notepad-container {
                height: auto;
                width: 100%;
                margin: 0;
                padding: 0;
                background: white;
                box-shadow: none;
            }

            .menu-bar, .toolbar, .status-bar, .fullscreen-toggle {
                display: none !important;
            }

            .content-area, #editor {
                height: auto;
                border: none;
                overflow: visible; /* Allow content to flow onto multiple pages */
            }

            .notepad-header {
                text-align: center;
                margin-bottom: 20px;
                border-bottom: none;
            }
        }
    </style>
</head>
<body>
    <div class="notepad-container">
        <div class="notepad-header">
            <h1>Online Notepad</h1>
        </div>

        <div class="menu-bar">
            <div class="menu-item">File</div>
            <div class="menu-item">Edit</div>
            <div class="menu-item">Insert</div>
            <div class="menu-item">View</div>
            <div class="menu-item">Help</div>
        </div>

        <div class="toolbar">
            <div class="toolbar-item" title="New document" data-action="new">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
                    <polyline points="14 2 14 8 20 8"></polyline>
                </svg>
            </div>
            <div class="toolbar-item" title="Open file" data-action="open">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z"></path>
                </svg>
            </div>
            <div class="toolbar-item" title="Save" data-action="save">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"></path>
                    <polyline points="17 21 17 13 7 13 7 21"></polyline>
                    <polyline points="7 3 7 8 15 8"></polyline>
                </svg>
            </div>
            <div class="toolbar-item" title="Print" data-action="print">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="6 9 6 2 18 2 18 9"></polyline>
                    <path d="M6 18H4a2 2 0 0 1-2-2v-5a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v5a2 2 0 0 1-2 2h-2"></path>
                    <rect x="6" y="14" width="12" height="8"></rect>
                </svg>
            </div>
            <div class="toolbar-separator"></div>
            <div class="toolbar-item" title="Cut" data-action="cut">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="6" cy="6" r="3"></circle>
                    <circle cx="6" cy="18" r="3"></circle>
                    <line x1="20" y1="4" x2="8.12" y2="15.88"></line>
                    <line x1="14.47" y1="14.48" x2="20" y2="20"></line>
                    <line x1="8.12" y1="8.12" x2="12" y2="12"></line>
                </svg>
            </div>
            <div class="toolbar-item" title="Copy" data-action="copy">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                    <path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"></path>
                </svg>
            </div>
            <div class="toolbar-item" title="Paste" data-action="paste">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
                    <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
                </svg>
            </div>
            <div class="toolbar-separator"></div>
            <div class="toolbar-item" title="Undo" data-action="undo">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M3 10h10a8 8 0 1 1 0 16H3"></path>
                    <path d="M3 10l6-6"></path>
                    <path d="M3 10l6 6"></path>
                </svg>
            </div>
            <div class="toolbar-item" title="Redo" data-action="redo">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M21 10H11a8 8 0 1 0 0 16h10"></path>
                    <path d="M21 10l-6-6"></path>
                    <path d="M21 10l-6 6"></path>
                </svg>
            </div>
            <div class="toolbar-separator"></div>
            <div class="toolbar-item" title="Find" data-action="find">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </div>
            <div class="toolbar-separator"></div>
            <div class="dropdown">
                <select id="font-family">
                    <option value="Arial">Font Family</option>
                    <option value="Arial">Arial</option>
                    <option value="Times New Roman">Times New Roman</option>
                    <option value="Courier New">Courier New</option>
                    <option value="Georgia">Georgia</option>
                    <option value="Verdana">Verdana</option>
                    <option value="Roboto, sans-serif">Roboto</option>
                    <option value="Open Sans, sans-serif">Open Sans</option>
                    <option value="Lato, sans-serif">Lato</option>
                </select>
            </div>
            <div class="dropdown">
                <select id="font-size">
                    <option value="16">Font Sizes</option>
                    <option value="10">10</option>
                    <option value="12">12</option>
                    <option value="14">14</option>
                    <option value="16">16</option>
                    <option value="18">18</option>
                    <option value="20">20</option>
                    <option value="24">24</option>
                    <option value="28">28</option>
                    <option value="32">32</option>
                </select>
            </div>
             <div class="toolbar-item" title="Zoom In" data-action="zoomIn">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                    <line x1="11" y1="8" x2="11" y2="14"></line>
                    <line x1="8" y1="11" x2="14" y2="11"></line>
                </svg>
            </div>
            <div class="toolbar-item" title="Zoom Out" data-action="zoomOut">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                    <line x1="8" y1="11" x2="14" y2="11"></line>
                </svg>
            </div>
            <div class="toolbar-item" title="Toggle Full Screen" data-action="fullscreen">
                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <polyline points="15 3 21 3 21 9"></polyline>
                    <polyline points="9 21 3 21 3 15"></polyline>
                    <line x1="21" y1="3" x2="14" y2="10"></line>
                    <line x1="3" y1="21" x2="10" y2="14"></line>
                </svg>
            </div>
        </div>

        <div class="content-area">
            <textarea id="editor" placeholder="Type your text here..."></textarea>
        </div>

        <div class="status-bar">
            <div class="word-count">Words: 0</div>
            <div class="char-count">Characters: 0</div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const editor = document.getElementById('editor');
            const wordCount = document.querySelector('.word-count');
            const charCount = document.querySelector('.char-count');
            const fontFamilySelect = document.getElementById('font-family');
            const fontSizeSelect = document.getElementById('font-size');
            const toolbarItems = document.querySelectorAll('.toolbar-item');
            const menuItems = document.querySelectorAll('.menu-item');
            const notepadContainer = document.querySelector('.notepad-container');

            let currentFontSize = parseInt(localStorage.getItem('notepad-font-size') || '16'); // Default to 16 if not saved

            // Update word and character count
            function updateCounts() {
                const text = editor.value;
                // Split by whitespace, filter out empty strings
                const words = text.trim() === '' ? 0 : text.trim().split(/\s+/).filter(word => word !== '').length;
                const chars = text.length;

                wordCount.textContent = `Words: ${words}`;
                charCount.textContent = `Characters: ${chars}`;
            }

            // --- Text Formatting and Actions ---

            // Execute a document command (like cut, copy, paste, undo, redo)
            function formatText(command, value = null) {
                // execCommand is deprecated but still widely supported for basic actions
                try {
                     document.execCommand(command, false, value);
                } catch (e) {
                    console.error(`Error executing command ${command}:`, e);
                    showNotification(`Action "${command}" failed. Your browser might not support it.`, 'error');
                }
                editor.focus(); // Keep focus on the editor after action
            }

            // Change font family
            fontFamilySelect.addEventListener('change', function() {
                editor.style.fontFamily = this.value;
                localStorage.setItem('notepad-font-family', this.value);
            });

            // Change font size
            fontSizeSelect.addEventListener('change', function() {
                currentFontSize = parseInt(this.value); // Update current size
                editor.style.fontSize = currentFontSize + 'px';
                localStorage.setItem('notepad-font-size', currentFontSize);
            });

            // Load saved font preferences
            function loadFontPreferences() {
                const savedFontFamily = localStorage.getItem('notepad-font-family');
                const savedFontSize = localStorage.getItem('notepad-font-size');

                if (savedFontFamily) {
                    editor.style.fontFamily = savedFontFamily;
                    // Set the select value if it exists in the options
                    if ([...fontFamilySelect.options].some(option => option.value === savedFontFamily)) {
                         fontFamilySelect.value = savedFontFamily;
                    }
                }

                if (savedFontSize) {
                    currentFontSize = parseInt(savedFontSize); // Load saved size
                    editor.style.fontSize = currentFontSize + 'px';
                     // Set the select value if it exists in the options
                    if ([...fontSizeSelect.options].some(option => option.value === savedFontSize)) {
                         fontSizeSelect.value = savedFontSize;
                    }
                }
            }

            // Insert text at cursor position
            function insertTextAtCursor(text) {
                const startPos = editor.selectionStart;
                const endPos = editor.selectionEnd;
                const value = editor.value;

                // Insert text
                editor.value = value.substring(0, startPos) + text + value.substring(endPos);

                // Move cursor to the end of the inserted text
                editor.selectionStart = editor.selectionEnd = startPos + text.length;

                editor.focus();
                updateCounts(); // Update counts after insertion
            }

            // --- File Actions ---

            // New document
            function newDocument() {
                if (editor.value.trim() !== '') {
                    const confirmNew = confirm('You have unsaved changes. Do you want to create a new document?');
                    if (!confirmNew) {
                        return; // Stop if user cancels
                    }
                }
                editor.value = ''; // Clear the editor
                updateCounts();
                localStorage.removeItem('notepad-content'); // Clear saved content
                showNotification('New document created.', 'info');
            }

            // Open file
            function openFile() {
                const input = document.createElement('input');
                input.type = 'file';
                // Accept common text/code file types
                input.accept = '.txt, .md, .html, .css, .js, .json, .xml, .log, .csv';
                input.style.display = 'none'; // Hide the input element
                document.body.appendChild(input);

                input.onchange = e => {
                    const file = e.target.files[0];
                    if (!file) {
                        document.body.removeChild(input); // Clean up the input
                        return;
                    }

                    const reader = new FileReader();

                    reader.onload = function(e) {
                        editor.value = e.target.result;
                        updateCounts();
                        document.body.removeChild(input); // Clean up the input
                        showNotification(`File "${file.name}" loaded successfully!`, 'success');
                    };

                    reader.onerror = function() {
                        showNotification('Error reading file!', 'error');
                        document.body.removeChild(input); // Clean up the input
                    };

                    // Read the file as text
                    reader.readAsText(file);
                };

                // Trigger the file input click
                input.click();
            }

            // Save document (as a .txt file)
            function saveDocument() {
                const content = editor.value;
                const blob = new Blob([content], { type: 'text/plain' });
                const a = document.createElement('a');
                const fileName = 'notepad_note.txt'; // Default file name

                a.href = URL.createObjectURL(blob);
                a.download = fileName;
                a.style.display = 'none'; // Hide the link
                document.body.appendChild(a);

                a.click(); // Trigger the download

                URL.revokeObjectURL(a.href); // Clean up the URL object
                document.body.removeChild(a); // Clean up the link

                showNotification('Document saved as ' + fileName, 'success');
            }

            // --- Edit Actions ---

            // Select all text
            function selectAll() {
                editor.select();
                editor.focus();
            }

            // Find text (basic browser find)
            function findText() {
                 // This will trigger the browser's built-in find functionality
                 // A more advanced find would require a custom UI and search logic
                 showNotification('Using browser\'s built-in Find. Press Ctrl+F (Cmd+F on Mac).', 'info');
                 // Optionally, you could open a custom find dialog here
            }

            // --- Insert Actions ---

            // Insert current date
            function insertDate() {
                const today = new Date();
                const date = today.toLocaleDateString(); // Format based on user's locale
                insertTextAtCursor(date);
                showNotification('Date inserted.', 'info');
            }

            // Insert current time
            function insertTime() {
                const now = new Date();
                const time = now.toLocaleTimeString(); // Format based on user's locale
                insertTextAtCursor(time);
                showNotification('Time inserted.', 'info');
            }

            // --- View Actions ---

            // Toggle Full Screen
            function toggleFullscreen() {
                if (!document.fullscreenElement) {
                    // Enter fullscreen
                    if (notepadContainer.requestFullscreen) {
                        notepadContainer.requestFullscreen();
                    } else if (notepadContainer.mozRequestFullScreen) { /* Firefox */
                        notepadContainer.mozRequestFullScreen();
                    } else if (notepadContainer.webkitRequestFullscreen) { /* Chrome, Safari and Opera */
                        notepadContainer.webkitRequestFullscreen();
                    } else if (notepadContainer.msRequestFullscreen) { /* IE/Edge */
                        notepadContainer.msRequestFullscreen();
                    }
                } else {
                    // Exit fullscreen
                    if (document.exitFullscreen) {
                        document.exitFullscreen();
                    } else if (document.mozCancelFullScreen) { /* Firefox */
                        document.mozCancelFullScreen();
                    } else if (document.webkitExitFullscreen) { /* Chrome, Safari and Opera */
                        document.webkitExitFullscreen();
                    } else if (document.msExitFullscreen) { /* IE/Edge */
                        document.msExitFullscreen();
                    }
                }
            }

            // Zoom In
            function zoomIn() {
                currentFontSize += 2; // Increase font size by 2px
                editor.style.fontSize = currentFontSize + 'px';
                localStorage.setItem('notepad-font-size', currentFontSize); // Save new size
                 showNotification('Zoomed in.', 'info');
            }

            // Zoom Out
            function zoomOut() {
                if (currentFontSize > 6) { // Prevent zooming out too much
                    currentFontSize -= 2; // Decrease font size by 2px
                    editor.style.fontSize = currentFontSize + 'px';
                    localStorage.setItem('notepad-font-size', currentFontSize); // Save new size
                    showNotification('Zoomed out.', 'info');
                } else {
                    showNotification('Cannot zoom out further.', 'warning');
                }
            }

            // --- Help Actions ---

            // Show Keyboard Shortcuts
            function showKeyboardShortcuts() {
                const shortcuts = `
Keyboard Shortcuts:
New: Ctrl+N
Open: Ctrl+O
Save: Ctrl+S
Print: Ctrl+P
Undo: Ctrl+Z
Redo: Ctrl+Y
Cut: Ctrl+X
Copy: Ctrl+C
Paste: Ctrl+V
Select All: Ctrl+A
Toggle Full Screen: F11
Zoom In: Ctrl++
Zoom Out: Ctrl+-
                `;
                // Using alert for simplicity, a modal would be better
                alert(shortcuts);
            }

            // Show About information
            function showAbout() {
                const aboutInfo = `
Online Notepad
Version 1.0
Created by Gemini

This is a simple, free, and responsive online notepad.
Your notes are saved locally in your browser.
                `;
                 // Using alert for simplicity
                alert(aboutInfo);
            }


            // --- Event Listeners ---

            // Update counts on input
            editor.addEventListener('input', updateCounts);

            // Initialize counts on load
            updateCounts();

            // Save to local storage periodically (every 3 seconds)
            setInterval(saveToLocalStorage, 3000);

            // Save to local storage on page unload (more reliable)
            window.addEventListener('beforeunload', saveToLocalStorage);

            // Load content and preferences on page load
            loadFromLocalStorage();
            loadFontPreferences();


            // Handle Toolbar Item Clicks
            toolbarItems.forEach(item => {
                item.addEventListener('click', function() {
                    const action = this.getAttribute('data-action');
                    switch (action) {
                        case 'new':
                            newDocument();
                            break;
                        case 'open':
                            openFile();
                            break;
                        case 'save':
                            saveDocument();
                            break;
                        case 'print':
                            window.print(); // Use browser print functionality
                            break;
                        case 'cut':
                            formatText('cut');
                            break;
                        case 'copy':
                            formatText('copy');
                            break;
                        case 'paste':
                            // Note: document.execCommand('paste') has security restrictions
                            // It might not work in all browsers or contexts.
                            // A better approach involves using the async Clipboard API,
                            // but that requires user permission and is more complex.
                            formatText('paste');
                            showNotification('Paste action attempted. Browser security may prevent programmatic paste.', 'warning');
                            break;
                        case 'undo':
                            formatText('undo');
                            break;
                        case 'redo':
                            formatText('redo');
                            break;
                        case 'find':
                            findText();
                            break;
                        case 'zoomIn':
                            zoomIn();
                            break;
                        case 'zoomOut':
                            zoomOut();
                            break;
                        case 'fullscreen':
                            toggleFullscreen();
                            break;
                        default:
                            console.warn('Unknown toolbar action:', action);
                    }
                });
            });


            // --- Dropdown Menu Logic ---

            // Setup menu items with their respective actions
            const menuOptions = {
                'File': [
                    { label: 'New', action: newDocument, shortcut: 'Ctrl+N' },
                    { label: 'Open', action: openFile, shortcut: 'Ctrl+O' },
                    { label: 'Save', action: saveDocument, shortcut: 'Ctrl+S' },
                    { label: 'Print', action: () => window.print(), shortcut: 'Ctrl+P' }
                ],
                'Edit': [
                    { label: 'Undo', action: () => formatText('undo'), shortcut: 'Ctrl+Z' },
                    { label: 'Redo', action: () => formatText('redo'), shortcut: 'Ctrl+Y' },
                    { label: 'Cut', action: () => formatText('cut'), shortcut: 'Ctrl+X' },
                    { label: 'Copy', action: () => formatText('copy'), shortcut: 'Ctrl+C' },
                    { label: 'Paste', action: () => {
                         formatText('paste');
                         showNotification('Paste action attempted. Browser security may prevent programmatic paste.', 'warning');
                    }, shortcut: 'Ctrl+V' },
                    { label: 'Select All', action: selectAll, shortcut: 'Ctrl+A' }
                ],
                'Insert': [
                    { label: 'Date', action: insertDate },
                    { label: 'Time', action: insertTime },
                    { label: 'Special Character (©)', action: () => insertTextAtCursor('©') } // Example special character
                ],
                'View': [
                    { label: 'Toggle Full Screen', action: toggleFullscreen, shortcut: 'F11' },
                    { label: 'Zoom In', action: zoomIn, shortcut: 'Ctrl++' },
                    { label: 'Zoom Out', action: zoomOut, shortcut: 'Ctrl+-' }
                ],
                'Help': [
                    { label: 'Keyboard Shortcuts', action: showKeyboardShortcuts },
                    { label: 'About', action: showAbout }
                ]
            };

            // Create all dropdown menus
            menuItems.forEach(menuItem => {
                const menuName = menuItem.textContent.trim();
                if (menuOptions[menuName]) {
                    createDropdownMenu(menuItem, menuOptions[menuName]);
                }
            });

            // Function to create dropdown menu
            function createDropdownMenu(menuItem, items) {
                // Create dropdown container
                const dropdown = document.createElement('div');
                dropdown.className = 'dropdown-menu';

                // Add menu items
                items.forEach(item => {
                    const menuOption = document.createElement('div');
                    menuOption.className = 'dropdown-item';

                    // Create label text
                    const labelSpan = document.createElement('span');
                    labelSpan.textContent = item.label;
                    menuOption.appendChild(labelSpan);

                    // Add shortcut text if available
                    if (item.shortcut) {
                        const shortcutSpan = document.createElement('span');
                        shortcutSpan.textContent = item.shortcut;
                        shortcutSpan.style.marginLeft = 'auto';
                        shortcutSpan.style.fontSize = '0.8em';
                        shortcutSpan.style.color = '#666';
                        menuOption.appendChild(shortcutSpan);
                    }

                    // Handle click event
                    menuOption.addEventListener('click', (e) => {
                        e.stopPropagation(); // Prevent click from closing dropdown immediately
                        hideDropdown(dropdown); // Hide this dropdown
                        item.action(); // Perform the action
                    });

                    dropdown.appendChild(menuOption);
                });

                // Add dropdown to menu item
                menuItem.appendChild(dropdown);
                menuItem.style.position = 'relative'; // Needed for absolute positioning of dropdown

                // Toggle dropdown on click
                menuItem.addEventListener('click', (e) => {
                    e.stopPropagation(); // Prevent click from closing other dropdowns

                    // Check if this dropdown is already visible
                    const isVisible = dropdown.style.display === 'block';

                    // Hide all dropdowns first
                    hideAllDropdowns();

                    // If this dropdown wasn't visible, show it
                    if (!isVisible) {
                        showDropdown(dropdown);
                    }
                });

                 // For mobile/touch devices (using touchend for better compatibility)
                menuItem.addEventListener('touchend', (e) => {
                    e.stopPropagation();
                    const isVisible = dropdown.style.display === 'block';
                    hideAllDropdowns();
                    if (!isVisible) {
                        showDropdown(dropdown);
                    }
                });
            }

            // Show dropdown with proper positioning
            function showDropdown(dropdown) {
                 dropdown.style.display = 'block'; // Show it first to calculate dimensions
                 dropdown.style.visibility = 'hidden'; // Hide temporarily for measurement

                 const menuItem = dropdown.parentElement;
                 const menuRect = menuItem.getBoundingClientRect();

                 const dropdownHeight = dropdown.offsetHeight;
                 const dropdownWidth = dropdown.offsetWidth;

                 const spaceBelow = window.innerHeight - menuRect.bottom;
                 const spaceRight = window.innerWidth - menuRect.left;

                 // Reset positioning styles
                 dropdown.style.top = 'auto';
                 dropdown.style.bottom = 'auto';
                 dropdown.style.left = 'auto';
                 dropdown.style.right = 'auto';

                 // Position based on available space
                 if (spaceBelow < dropdownHeight && menuRect.top > dropdownHeight) {
                     // Not enough space below, but enough space above
                     dropdown.style.bottom = `${window.innerHeight - menuRect.top}px`;
                 } else {
                     // Default position (below)
                     dropdown.style.top = `${menuRect.bottom}px`;
                 }

                 if (spaceRight < dropdownWidth) {
                     // Not enough space to the right, align to the right edge of the menu item
                     dropdown.style.right = `${window.innerWidth - menuRect.right}px`;
                 } else {
                     // Default position (left-aligned)
                     dropdown.style.left = `${menuRect.left}px`;
                 }

                // Ensure dropdown is within viewport bounds on small screens (fixed position handling)
                if (window.innerWidth <= 768) { // Apply fixed positioning logic for smaller screens
                     dropdown.style.position = 'fixed';
                     dropdown.style.top = '50%';
                     dropdown.style.left = '50%';
                     dropdown.style.transform = 'translate(-50%, -50%)';
                     dropdown.style.width = '90%';
                     dropdown.style.maxWidth = '350px';
                     dropdown.style.maxHeight = '70vh';
                 } else {
                     dropdown.style.position = 'absolute'; // Revert to absolute for larger screens
                 }


                 dropdown.style.visibility = 'visible'; // Make it visible again
            }


            // Hide dropdown
            function hideDropdown(dropdown) {
                dropdown.style.display = 'none';
            }

            // Hide all dropdowns
            function hideAllDropdowns() {
                const dropdowns = document.querySelectorAll('.dropdown-menu');
                dropdowns.forEach(dropdown => {
                    hideDropdown(dropdown);
                });
            }

            // Close all dropdowns when clicking elsewhere
            document.addEventListener('click', hideAllDropdowns);
            // Also handle touch events for mobile
            document.addEventListener('touchend', hideAllDropdowns);


            // --- Local Storage ---

            // Save to local storage
            function saveToLocalStorage() {
                try {
                    localStorage.setItem('notepad-content', editor.value);
                     // showNotification('Note saved locally.', 'info'); // Optional: show save confirmation
                } catch (e) {
                    console.error('Error saving to local storage:', e);
                    showNotification('Could not save note to local storage. Your browser may be in private mode or storage is full.', 'error');
                }
            }

            // Load from local storage
            function loadFromLocalStorage() {
                try {
                    const savedContent = localStorage.getItem('notepad-content');
                    if (savedContent !== null) { // Check if item exists
                        editor.value = savedContent;
                        updateCounts();
                         // showNotification('Note loaded from local storage.', 'success'); // Optional: show load confirmation
                    }
                } catch (e) {
                    console.error('Error loading from local storage:', e);
                     showNotification('Could not load note from local storage.', 'error');
                }
            }

            // --- Notifications ---

            // Display notification
            function showNotification(message, type = 'info', duration = 3000) {
                // Remove existing notifications to prevent stacking
                const existingNotifications = document.querySelectorAll('.notification');
                existingNotifications.forEach(n => n.remove());

                const notification = document.createElement('div');
                notification.className = `notification ${type}`; // Add type class for styling
                notification.textContent = message;

                document.body.appendChild(notification);

                // Animate in
                setTimeout(() => {
                    notification.classList.add('show');
                }, 10); // Small delay to allow CSS transition

                // Remove after duration
                setTimeout(() => {
                    notification.classList.remove('show'); // Animate out
                    // Remove element after transition
                    notification.addEventListener('transitionend', () => {
                        notification.remove();
                    });
                     // Fallback removal if transitionend doesn't fire (e.g., element removed before transition ends)
                    setTimeout(() => {
                         if(notification.parentElement) {
                            notification.remove();
                         }
                    }, 500); // Match CSS transition duration
                }, duration);
            }

            // --- Keyboard Shortcuts ---

            document.addEventListener('keydown', function(e) {
                let handled = false;

                // Check for Ctrl/Cmd key
                const isCtrlCmd = e.ctrlKey || e.metaKey; // metaKey is for Mac Cmd key

                if (isCtrlCmd) {
                    switch (e.key.toLowerCase()) {
                        case 'n': // Ctrl+N / Cmd+N
                            e.preventDefault(); // Prevent default browser new tab action
                            newDocument();
                            handled = true;
                            break;
                        case 'o': // Ctrl+O / Cmd+O
                            e.preventDefault(); // Prevent default browser open file dialog
                            openFile();
                            handled = true;
                            break;
                        case 's': // Ctrl+S / Cmd+S
                            e.preventDefault(); // Prevent default browser save page action
                            saveDocument();
                            handled = true;
                            break;
                        case 'p': // Ctrl+P / Cmd+P
                            // Let the browser handle print, no preventDefault here
                            // window.print();
                            // handled = true; // Don't mark as handled if browser handles it
                            break; // Let browser handle print
                        case 'z': // Ctrl+Z / Cmd+Z
                            // Let the browser handle undo
                            // formatText('undo');
                            // handled = true;
                            break; // Let browser handle undo
                        case 'y': // Ctrl+Y / Cmd+Y
                             // Let the browser handle redo
                            // formatText('redo');
                            // handled = true;
                            break; // Let browser handle redo
                         case 'x': // Ctrl+X / Cmd+X
                             // Let the browser handle cut
                            // formatText('cut');
                            // handled = true;
                            break; // Let browser handle cut
                         case 'c': // Ctrl+C / Cmd+C
                             // Let the browser handle copy
                            // formatText('copy');
                            // handled = true;
                            break; // Let browser handle copy
                         case 'v': // Ctrl+V / Cmd+V
                             // Let the browser handle paste
                            // formatText('paste');
                            // handled = true;
                            break; // Let browser handle paste
                        case 'a': // Ctrl+A / Cmd+A
                            e.preventDefault(); // Prevent default browser select all
                            selectAll();
                            handled = true;
                            break;
                        case '+': // Ctrl++ / Cmd++ (Zoom In)
                            e.preventDefault(); // Prevent browser zoom
                            zoomIn();
                            handled = true;
                            break;
                        case '-': // Ctrl+- / Cmd+- (Zoom Out)
                            e.preventDefault(); // Prevent browser zoom
                            zoomOut();
                            handled = true;
                            break;
                         case 'f': // Ctrl+F / Cmd+F (Find)
                            // Let the browser handle find
                            // findText();
                            // handled = true;
                            break; // Let browser handle find
                    }
                } else if (e.key === 'F11') { // F11 for Fullscreen
                     e.preventDefault(); // Prevent default browser fullscreen
                     toggleFullscreen();
                     handled = true;
                }


                if (handled) {
                    // Stop propagation if the shortcut was handled by our script
                    // This prevents the browser from also processing it (e.g., opening save dialog)
                    e.stopPropagation();
                }
            });

            // --- Fullscreen Change Listener ---
            // Add a class to the container when fullscreen is active
            document.addEventListener('fullscreenchange', updateFullscreenClass);
            document.addEventListener('mozfullscreenchange', updateFullscreenClass);
            document.addEventListener('webkitfullscreenchange', updateFullscreenClass);
            document.addEventListener('msfullscreenchange', updateFullscreenClass);

            function updateFullscreenClass() {
                if (document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement) {
                    notepadContainer.classList.add('fullscreen');
                } else {
                    notepadContainer.classList.remove('fullscreen');
                }
            }

            // --- Initial Load ---
            loadFromLocalStorage();
            loadFontPreferences();
            updateCounts(); // Ensure counts are correct on load
        });
    </script>
</body>
</html>
